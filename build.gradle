apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.7'
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
	}
}
 
group = 'etri'
version = '20.02.12'

sourceCompatibility = JavaVersion.VERSION_1_8;
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.16.1'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
	main {
		java {
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
			srcDirs 'build/generated/source/proto/test/grpc'
			srcDirs 'build/generated/source/proto/test/java'
		}
	}
}

repositories {
	mavenLocal()
	maven { url "http://www.datanucleus.org/downloads/maven2/" }
	maven { url "https://repo.osgeo.org/repository/release/" }
	mavenCentral()
}

ext {
	grpc_version = '1.16.1'
	protobuf_version = '3.5.1'
	geotools_version = '26.1'
	jts_version = '1.18.2'
	commons_io_version = '2.11.0'
	commons_csv_version = '1.5'
	cglib_version = '3.3.0'
	joda_time_version = '2.10'
	picocli_version = '3.9.6'
	univocity_version = '2.8.1'
	postgresql_version = '42.0.0'
	postgis_jdbc_version = '2.2.1'
	mvel2_version = '2.4.0.Final'
	rxjava2_version = '2.2.21'
}


dependencies {
	api project(':utils')
	api project(':utilsx')
	
	api "org.locationtech.jts:jts:${jts_version}"
	
	// GeoTools, JTS, Proj4J
	api	"org.geotools:gt-opengis:${geotools_version}"
//	api	("org.geotools:gt-api:${geotools_version}") {
//		exclude group: "org.apache.httpcomponents", module: "httpclient"
//	}
	api	"org.geotools:gt-epsg-hsql:${geotools_version}"
	api "org.geotools:gt-shapefile:${geotools_version}"
	api	"org.geotools:gt-geojson:${geotools_version}"

	// Misc
	implementation "commons-io:commons-io:${commons_io_version}"
	implementation "org.apache.commons:commons-csv:${commons_csv_version}"
	implementation "cglib:cglib:${cglib_version}"
	implementation "io.reactivex.rxjava2:rxjava:${rxjava2_version}"
	implementation "org.mvel:mvel2:${mvel2_version}"
	
	// grpc
	api "com.google.protobuf:protobuf-java:${protobuf_version}"
	api "com.google.protobuf:protobuf-java-util:${protobuf_version}"
	api "io.grpc:grpc-stub:${grpc_version}"
	api "io.grpc:grpc-netty-shaded:${grpc_version}"
	implementation "io.grpc:grpc-protobuf:${grpc_version}"
	
	// PostSQL
	implementation "net.postgis:postgis-jdbc:${postgis_jdbc_version}"
	
	// Joda-Time
	implementation "joda-time:joda-time:${joda_time_version}"
	
	// StringTemplate4
	implementation "org.antlr:ST4:4.0.8"
	
	testImplementation "junit:junit:4.12"
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	source sourceSets.main.allJava
	
	title = 'Marmot API Document'
	
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.links = ['https://docs.oracle.com/javase/8/docs/api/']
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

publishing {
	publications {
		marmotCommon(MavenPublication) {
			from components.java
			
			artifact sourceJar
			artifact javadocJar
		}
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.startsWith("src/test/") ) {
							entry.output = 'test_classes'
						}
						else if ( entry.path.startsWith("build/generated/source/proto/test/") ) {
							entry.output = 'test_classes'
						}
						else {
							entry.output = 'classes'
						}
					}
				}
			}
		}
	}
}