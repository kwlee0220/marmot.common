apply plugin: 'java'
apply plugin: 'com.google.protobuf'
 
group = 'etri'
version = '5.11.03'

sourceCompatibility = JavaVersion.VERSION_1_8;
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'


buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
	}
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.2.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.2.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

repositories {
    mavenLocal()
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
	}
	maven {
		url "http://download.osgeo.org/webdav/geotools/"
	}
    mavenCentral()
}


ext.grpc_version = '1.8.0'
ext.mvel2_version = '2.4.0.Final'
ext.geotools_version = '17.2'
ext.commons_csv_version = '1.5'
ext.httpclient_version = '4.5.6'
ext.joda_time_version = '2.10'

dependencies {
	compile project(':utils')
//	compile "etri:utils:1.0"
	
	compile "org.mvel:mvel2:${mvel2_version}"

	// GeoTools, JTS, Proj4J
	compile	"org.geotools:gt-epsg-hsql:${geotools_version}"
	compile "org.geotools:gt-shapefile:${geotools_version}"
	compile	"org.geotools:gt-geojson:${geotools_version}"
//	compile	"org.geotools:gt-cql:${geotools_version}"

	// Jackson
	compile "com.fasterxml.jackson.core:jackson-databind:2.6.5"

	// Misc
	compile "org.apache.commons:commons-csv:${commons_csv_version}"
	compile "org.apache.httpcomponents:httpclient:${httpclient_version}"
	
	// grpc
	compile "io.grpc:grpc-netty:${grpc_version}"
	compile "io.grpc:grpc-protobuf:${grpc_version}"
	compile "io.grpc:grpc-stub:${grpc_version}"
	
	// Joda-Time
	compile "joda-time:joda-time:${joda_time_version}"
	
	// StringTemplate4
	compile "org.antlr:ST4:4.0.8"
	
	testCompile "junit:junit:4.12"
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	source sourceSets.main.allJava
	
	title = 'Marmot API Document'
	
	options.charSet = 'UTF-8'
	options.encoding = 'UTF-8'
	options.links = ['https://docs.oracle.com/javase/8/docs/api/']
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
		}
	}
}