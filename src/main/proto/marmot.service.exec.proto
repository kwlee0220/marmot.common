syntax = "proto3";

option java_multiple_files = true;
option java_package = "marmot.proto.service";

package marmot.proto.service;

import public "marmot.proto";
import public "marmot.service.proto";
import public "marmot.service.dataset.proto";
import public "marmot.optor.proto";


service PlanExecutionService {
	// ExecutePlanRequest
	rpc start(ExecutePlanRequest) returns (ExecutionInfoResponse);
	// ExecutePlanRequest
	rpc execute(ExecutePlanRequest) returns (VoidResponse);
	// ExecutePlanRequest -> Stream
	rpc executeLocally(stream DownChunkResponse) returns (stream DownChunkRequest);
	// ExecutePlanRequest
	rpc executeLocallyWithInput(stream UpRequestDownResponse) returns (stream UpResponseDownRequest);
	rpc executeToSingle(ExecutePlanRequest) returns (OptionalRecordResponse);
	// ExecutePlanRequest -> Stream
	rpc executeToRecordSet(stream DownChunkResponse) returns (stream DownChunkRequest);
	// GetStreamRequest -> Stream
	rpc executeToStream(stream DownChunkResponse) returns (stream DownChunkRequest);
	
	rpc getOutputRecordSchema(GetOutputRecordSchemaRequest) returns (RecordSchemaResponse);
	
	rpc executeProcess(ExecuteProcessRequest) returns (VoidResponse);
	rpc getProcessRecordSchema(ExecuteProcessRequest) returns (RecordSchemaResponse);
	
	rpc findAnalysis(StringProto) returns (MarmotAnalysisResponse);
	rpc findParentAnalysis(StringProto) returns (MarmotAnalysisResponse);
	rpc getAncestorAnalysisAll(StringProto) returns (stream MarmotAnalysisResponse);
	rpc getDescendantAnalysisAll(StringProto) returns (stream MarmotAnalysisResponse);
	rpc getAnalysisAll(VoidProto) returns (stream MarmotAnalysisResponse);
	rpc addAnalysis(MarmotAnalysisProto) returns (VoidResponse);
	rpc deleteAnalysis(DeleteAnalysisRequest) returns (VoidResponse);
	rpc deleteAnalysisAll(VoidProto) returns (VoidResponse);
	rpc startAnalysis(MarmotAnalysisProto) returns (ExecutionInfoResponse);
	rpc executeAnalysis(MarmotAnalysisProto) returns (VoidResponse);
	
	rpc getExecutionInfo(StringProto) returns (ExecutionInfoResponse);
	rpc getExecutionInfoList(VoidProto) returns (ExecutionInfoListResponse);
	rpc setExecutionInfo(SetExecutionInfoRequest) returns (ExecutionInfoResponse);
	rpc cancelExecution(StringProto) returns (BoolResponse);
	rpc waitForFinished(WaitForFinishedRequest) returns (ExecutionInfoResponse);
	
	rpc ping(marmot.proto.VoidProto) returns (VoidResponse);
}

message PlanExecutionListenerProto {
	EndpointProto endpoint = 1;
	string id = 2;
}

message CreatePlanExecutionRequest {
	marmot.proto.optor.PlanProto plan = 1;
	PlanExecutionListenerProto listener = 2;
}

message ExecutePlanOptionsProto {
	oneof optional_disable_local_execution {
		bool disable_local_execution = 1;
	}
	oneof optional_map_output_compress_codec {
		string map_output_compress_codec = 2;
	}
}

message OptionalRecordResponse {
	oneof either {
		RecordProto record = 1;
		VoidProto none = 2;
		ErrorProto error = 3;
	}
}

message GetStreamRequest {
	string id = 1;
	marmot.proto.optor.PlanProto plan = 2;
}

message MarmotAnalysisProto {
	string id = 1;
	oneof member {
		PlanExecProto plan_exec = 2;
		ModuleExecProto module_exec = 3;
		CompositeExecProto composite_exec = 4;
		SystemExecProto system_exec = 5;
		ExternExecProto extern_exec = 6;
	}
	
	message PlanExecProto {
		marmot.proto.optor.PlanProto plan = 1;
		ExecutePlanOptionsProto options = 2;
	}
	
	message ModuleExecProto {
		string module_id = 1;
		string module_args = 2;
	}
	
	message CompositeExecProto {
		repeated string component = 1;
	}
	
	message SystemExecProto {
		string function_id = 1;
		repeated string function_arg = 2;
	}
	
	message ExternExecProto {
		string exec_path = 1;
		repeated string arguments = 2;
	}
}

message MarmotAnalysisResponse {
	oneof either {
		MarmotAnalysisProto analysis = 1;
		ErrorProto error = 2;
	}
}

message DeleteAnalysisRequest {
	string id = 1;			// 검색 대상 시작 디렉토리 경로
	bool recursive = 2;		// 하위 디렉토리 검색 여부.
}

message MarmotAnalysisTraverseRequest {
	string directory = 1;	// 검색 대상 시작 디렉토리 경로
	bool recursive = 2;		// 하위 디렉토리 검색 여부.
}

message ExecutionInfoProto {
	enum ExecutionStateProto {
		EXEC_RUNNING = 0;
		EXEC_COMPLETED = 1;
		EXEC_FAILED = 2;
		EXEC_CANCELLED = 4;
	}
	
	string id = 1;
	int64 started_time = 2;
	int64 finished_time = 3;
	int64 max_running_time = 4;
	int64 retention_time = 5;
	
	message ExecutionStateInfoProto {
		ExecutionStateProto state = 1;
		oneof optional_failure_cause {
			ErrorProto failure_cause = 2;
		}
	}
	ExecutionStateInfoProto exec_state_info = 6;
	int32 current_exec_index = 7;
	oneof optional_analysis_id {
		string analysis_id = 8;
	}
}

message SetExecutionInfoRequest {
	string exec_id = 1;
	ExecutionInfoProto exec_info = 2;
}

message ExecutionInfoResponse {
	oneof either {
		ExecutionInfoProto exec_info = 1;
		ErrorProto error = 2;
	}
}

message ExecutionInfoListResponse {
	message ExecutionInfoListProto {
		repeated ExecutionInfoProto exec_info = 1;
	}
	
	oneof either {
		ExecutionInfoListProto exec_info_list = 1;
		ErrorProto error = 2;
	}
}

message TimeoutProto {
	int64 timeout = 1;
	string time_unit = 2;
}

message WaitForFinishedRequest {
	string exec_id = 1;
	oneof optional_timeout {
		TimeoutProto timeout = 2;
	}
}

message GetOutputRecordSchemaRequest {
	marmot.proto.optor.PlanProto plan = 1;
	oneof optional_input_schema {
		RecordSchemaProto input_schema = 2;
	}
}

message ExecutePlanRequest {
	marmot.proto.optor.PlanProto plan = 1;
	ExecutePlanOptionsProto options = 2;
	bool has_input_rset = 3;			// 입력 레코드세트 유무
	bool use_compression = 4;			// 데이터 송수신할 때 압축사용 여부
}

message ExecuteProcessRequest {
	string process_id = 1;
	PropertiesProto params = 2;
}