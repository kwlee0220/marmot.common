syntax = "proto3";

option java_multiple_files = true;
option java_package = "marmot.proto.service";

package marmot.proto.service;

import public "marmot.proto";
import public "marmot.service.proto";
import public "marmot.optor.proto";


service PlanExecutionService {
	// ExecutePlanRequest
	rpc start(ExecutePlanRequest) returns (StringResponse);
	// ExecutePlanRequest
	rpc execute(ExecutePlanRequest) returns (VoidResponse);
	// ExecutePlanRequest -> Stream
	rpc executeLocally(stream DownChunkResponse) returns (stream DownChunkRequest);
	// ExecutePlanRequest
	rpc executeLocallyWithInput(stream UpRequestDownResponse) returns (stream UpResponseDownRequest);
	rpc executeToSingle(ExecutePlanRequest) returns (OptionalRecordResponse);
	// ExecutePlanRequest -> Stream
	rpc executeToRecordSet(stream DownChunkResponse) returns (stream DownChunkRequest);
	// GetStreamRequest -> Stream
	rpc executeToStream(stream DownChunkResponse) returns (stream DownChunkRequest);
	
	rpc getOutputRecordSchema(GetOutputRecordSchemaRequest) returns (RecordSchemaResponse);
	
	rpc executeProcess(ExecuteProcessRequest) returns (VoidResponse);
	rpc getProcessRecordSchema(ExecuteProcessRequest) returns (RecordSchemaResponse);
	
	rpc executeModule(StringProto) returns (VoidResponse);
	
	rpc getExecutionState(StringProto) returns (GetStateResponse);
	rpc cancelExecution(StringProto) returns (BoolResponse);
	rpc waitForFinished(WaitForFinishedRequest) returns (BoolResponse);
	
	rpc ping(marmot.proto.VoidProto) returns (VoidResponse);
}

message PlanExecutionListenerProto {
	EndpointProto endpoint = 1;
	string id = 2;
}

message CreatePlanExecutionRequest {
	marmot.proto.optor.PlanProto plan = 1;
	PlanExecutionListenerProto listener = 2;
}

message ExecutePlanOptionsProto {
	oneof optional_disable_local_execution {
		bool disable_local_execution = 1;
	}
	oneof optional_map_output_compress_codec {
		string map_output_compress_codec = 2;
	}
}

message OptionalRecordResponse {
	oneof either {
		RecordProto record = 1;
		VoidProto none = 2;
		ErrorProto error = 3;
	}
}

message GetStreamRequest {
	string id = 1;
	marmot.proto.optor.PlanProto plan = 2;
}

message TimeoutProto {
	int64 timeout = 1;
	string time_unit = 2;
}

enum ExecutionStateProto {
	EXEC_RUNNING = 0;
	EXEC_COMPLETED = 1;
	EXEC_FAILED = 2;
	EXEC_CANCELLED = 3;
}
message GetStateResponse {
	oneof either {
		ExecutionStateProto state = 1;
		ErrorProto error = 2;
	}
}

message GetOutputRecordSchemaRequest {
	marmot.proto.optor.PlanProto plan = 1;
	oneof optional_input_schema {
		RecordSchemaProto input_schema = 2;
	}
}

message ExecutePlanRequest {
	marmot.proto.optor.PlanProto plan = 1;
	ExecutePlanOptionsProto options = 2;
	bool has_input_rset = 3;			// 입력 레코드세트 유무
	bool use_compression = 4;			// 데이터 송수신할 때 압축사용 여부
}

message ExecuteProcessRequest {
	string process_id = 1;
	PropertiesProto params = 2;
}

message WaitForFinishedRequest {
	string exec_id = 1;
	oneof optional_timeout {
		int64 timeout = 2;
	}
}