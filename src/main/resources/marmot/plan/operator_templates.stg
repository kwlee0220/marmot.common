load(dsId) ::= <<
{ "loadDataset": { "dsId": "<dsId>"} }
>>

filter(pred, init=[]) ::= <<
{ "filterScript": {
    "predicate": {
       <if(init)>"initializer": "<init>",<endif>
       "expr": "<pred>"
    }
  }
}
>>

project(colsExpr) ::= <<
{ "project": { "columnExpr": "<colsExpr>" } }
>>

update(expr, init=[]) ::= <<
{ "update": {
    "script": {
       <if(init)>"initializer": "<init>",<endif>
       "expr": "<expr>"
    }
  }
}
>>

defineColumn(colDecl, colInit=[], globalInit=[]) ::= <<
{ "defineColumn": {
    "columnDecl": "<colDecl>"<if(colInit)>,
    "columnInitializer": {<if(globalInit)>
       "initializer": "<globalInit>",
       <endif>
       "expr": "<colInit>"
    }
    <endif>
  }
}
>>
collectToArrayColumn(colDecl, selectExpr) ::= <<
{ "collectToArrayColumn": {
    "columnDecl": "<colDecl>",
    "selector": { "expr": "<selectExpr>" }
  }
}
>>

expand(colDecls, colInit=[], init=[]) ::= <<
{ "expand": {
    "columnDecls": "<colDecls>" <if(colInit)>,
    "columnInitializer": {<if(init)>
       "initializer": "<init>",
       <endif>
       "expr": "<colInit>"
    }
    <endif>
  }
}
>>

parseCsv(inputColumn, header, delim=",", quote=[], nullValue=[]) ::= <<
{ "parseCsv": {
    "csvColumn": "<inputColumn>",
    "options": {
      "csvOptions": {
   	    "delimiter": "<delim>"<if(quote)>,
        "quote": "<quote>"<endif>
        
      }<if(nullValue)>,
      "nullValue": "<nullValue>"<endif>,
      "header": "<header>"
    }
  }
}
>>

sample(ratio) ::= <<
{ "sample": { "sampleRatio": <ratio> } }
>>

assignUid(col) ::= <<
{ "assignUid": { "uidColumn": "<col>" } }
>>

pickTopK(colsExpr, k) ::= <<
{ "pickTopK": {
    "sortKeyColumns": "<colsExpr>",
    "topK": <k>
  }
}
>>

sort(sortColsExpr) ::= <<
{ "sort": { "sortColumns": "<sortColsExpr>" } }
>>

distinct(cols, nworkers=[]) ::= <<
{ "distinct": {
    "keyColumns": "<cols>"<if(nworkers)>,
    "workerCount": <nworkers>
    <endif>
  }
}
>>

aggregate(aggrs) ::= <<
{ "reduce": { "valAggregates": { "aggregate": [<aggrs:{a | "<a>"}; separator=",">] } } }
>>

aggregateByGroup(groupKeyCols,aggrs,tagCols=[],nworkers=[]) ::= <<
{ "transformByGroup": {
  	"grouper": {
      "compareColumns": "<groupKeyCols>"<if(tagCols)>,
      "tagColumns" : "<tagCols>"
      <endif><if(nworkers)>,
      "groupWorkerCount" : <nworkers>
      <else>
      <endif>
  	},
    "transform": {
  	  "valAggregates": { "aggregate": [<aggrs:{aggr | "<aggr>"}; separator=",">] }
    }
  }
}
>>

takeByGroup(groupKeyCols, orderCols=[], count=[], nworkers=[]) ::= <<
{ "transformByGroup": {
  	"grouper": {
      "compareColumns": "<groupKeyCols>"<if(orderCols)>,
      "orderColumns": "<orderCols>"<else>
      <endif><if(nworkers)>,
      "groupWorkerCount" : "<nworkers>"
      <endif>
  	},
  	<if(count)>
    "transform": { "take": { "count": <count>} }
  	<else>
    "transform": { "list": {} }
  	<endif>
  }
}
>>

shard(count) ::= <<
{ "shard": { "partCount": <count> } }
>>

hashJoin(jcols, paramDsId, paramJoinCols, outCols, nworkers=[]) ::= <<
{ "hashJoin": {
    "joinColumns": "<jcols>",
    "paramDataset": "<paramDsId>",
    "paramColumns": "<paramJoinCols>",
    "outputColumnsExpr": "<outCols>",
    "joinOptions": { "joinType": "INNER_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>
semiHashJoin(jcols, paramDsId, paramJoinCols, nworkers=[]) ::= <<
{ "hashJoin": {
    "joinColumns": "<jcols>",
    "paramDataset": "<paramDsId>",
    "paramColumns": "<paramJoinCols>",
    "joinOptions": { "joinType": "SEMI_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>
leftOuterHashJoin(jcols, paramDsId, paramJoinCols, outCols, nworkers=[]) ::= <<
{ "hashJoin": {
    "joinColumns": "<jcols>",
    "paramDataset": "<paramDsId>",
    "paramColumns": "<paramJoinCols>",
    "outputColumnsExpr": "<outCols>",
    "joinOptions": { "joinType": "LEFT_OUTER_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>
rightOuterHashJoin(jcols, paramDsId, paramJoinCols, outCols, nworkers=[]) ::= <<
{ "hashJoin": {
    "joinColumns": "<jcols>",
    "paramDataset": "<paramDsId>",
    "paramColumns": "<paramJoinCols>",
    "outputColumnsExpr": "<outCols>",
    "joinOptions": { "joinType": "RIGHT_OUTER_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>
fullOuterHashJoin(jcols, paramDsId, paramJoinCols, outCols, nworkers=[]) ::= <<
{ "hashJoin": {
    "joinColumns": "<jcols>",
    "paramDataset": "<paramDsId>",
    "paramColumns": "<paramJoinCols>",
    "outputColumnsExpr": "<outCols>",
    "joinOptions": { "joinType": "FULL_OUTER_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>

loadHashJoin(leftDsId, leftJoinCols, rightDsId, rightJoinCols, outCols, nworkers=[]) ::= <<
{ "loadHashJoin": {
    "leftDataset": "<leftDsId>",
    "leftJoinColumns": "<leftJoinCols>",
    "rightDataset": "<rightDsId>",
    "rightJoinColumns": "<rightJoinCols>",
    "outputColumnsExpr": "<outCols>",
    "joinOptions": { "joinType": "INNER_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>
loadSemiHashJoin(leftDsId, leftJoinCols, rightDsId, rightJoinCols, outCols, nworkers=[]) ::= <<
{ "loadHashJoin": {
    "leftDataset": "<leftDsId>",
    "leftJoinColumns": "<leftJoinCols>",
    "rightDataset": "<rightDsId>",
    "rightJoinColumns": "<rightJoinCols>",
    "outputColumnsExpr": "<outCols>",
    "joinOptions": { "joinType": "SEMI_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>
loadLeftOuterHashJoin(leftDsId, leftJoinCols, rightDsId, rightJoinCols, outCols, nworkers=[]) ::= <<
{ "loadHashJoin": {
    "leftDataset": "<leftDsId>",
    "leftJoinColumns": "<leftJoinCols>",
    "rightDataset": "<rightDsId>",
    "rightJoinColumns": "<rightJoinCols>",
    "outputColumnsExpr": "<outCols>",
    "joinOptions": { "joinType": "LEFT_OUTER_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>
loadRightOuterHashJoin(leftDsId, leftJoinCols, rightDsId, rightJoinCols, outCols, nworkers=[]) ::= <<
{ "loadHashJoin": {
    "leftDataset": "<leftDsId>",
    "leftJoinColumns": "<leftJoinCols>",
    "rightDataset": "<rightDsId>",
    "rightJoinColumns": "<rightJoinCols>",
    "outputColumnsExpr": "<outCols>",
    "joinOptions": { "joinType": "RIGHT_OUTER_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>
loadFullOuterHashJoin(leftDsId, leftJoinCols, rightDsId, rightJoinCols, outCols, nworkers=[]) ::= <<
{ "loadHashJoin": {
    "leftDataset": "<leftDsId>",
    "leftJoinColumns": "<leftJoinCols>",
    "rightDataset": "<rightDsId>",
    "rightJoinColumns": "<rightJoinCols>",
    "outputColumnsExpr": "<outCols>",
    "joinOptions": { "joinType": "FULL_OUTER_JOIN"<if(nworkers)>, "workerCount": <nworkers><endif> }
  }
}
>>

query(dsId, keyDsId) ::= <<
{ "queryDataset": {
    "name": "<dsId>",
    "spatialRelation": "intersects",
    "keyValueDataset": "<keyDsId>"
  }
}
>>
queryDist(dsId, keyDsId, dist) ::= <<
{ "queryDataset": {
    "name": "<dsId>",
    "spatialRelation": "within_distance(<dist>)",
    "keyValueDataset": "<keyDsId>"
  }
}
>>

loadGrid(dsId, width, height, nparts=[]) ::= <<
{ "loadSquareGridfile": {
    "grid": {
      "dataset": "<dsId>",
      "cellSize": { "width": <width>, "height": <height> }
    }<if(nparts)>,
    "workerCount": <nparts>
    <else>
    <endif>
  }
}
>>
loadGridBounds(tlx, tly, brx, bry, width, height, nparts=[]) ::= <<
{ "loadSquareGridfile": {
    "grid": {
      "bounds": {
        "tl": { "x": <tlx>, "y": <tly> },
        "br": { "x": <brx>, "y": <bry> }
      }
      "cellSize": { "width": <width>, "height": <height> }
    }<if(nparts)>,
    "workerCount": <nparts>
    <else>
    <endif>
  }
}
>>

toPoint(x, y, out="the_geom") ::= <<
{ "toPoint": { "xColumn": "<x>", "yColumn": "<y>", "outColumn": "<out>" } }
>>
toXYCoordinates(x, y, out="the_geom") ::= <<
{ "toXYCoordinates": { "outColumn": "<out>", "xColumn": "<x>", "yColumn": "<y>"  } }
>>

buffer(dist, geomCol="the_geom") ::= <<
{ "buffer": { "geometryColumn": "<geomCol>", "distance": <dist>  } }
>>

centroid(geomCol="the_geom") ::= <<
{ "centroid": { "geometryColumn": "<geomCol>" } }
>>

transformCrs(srcSrid, tarSrid, geomCol="the_geom") ::= <<
{ "transformCrs": { "geometryColumn": "<geomCol>", "sourceSrid": "<srcSrid>", "targetSrid": "<tarSrid>" } }
>>

intersection(leftGeomcol, rightGeomcol, outGeomcol="the_geom") ::= <<
{ "binarySpatialIntersection": {
  	"leftGeometryColumn": "<leftGeomcol>",
  	"rightGeometryColumn": "<rightGeomcol>",
  	"outGeometryColumn": "<outGeomcol>"
  }
}
>>

assignGridCell(dsId, cellWidth, cellHeight) ::= <<
{ "assignSquareGridCell": {
    "grid": {
      "dataset": "<dsId>",
      "cellSize": { "width": <cellWidth>, "height": <cellHeight> }
    },
    "geometryColumn": "the_geom",
    "ignoreOutside": true
  }
}
>>
assignGridCell_bounds(tlx, tly, brx, bry, cellWidth, cellHeight) ::= <<
{ "assignSquareGridCell": {
    "grid": {
      "bounds": {
        "tl": { "x": <tlx>, "y": <tly> },
        "br": { "x": <brx>, "y": <bry> }
      }
      "cellSize": { "width": <cellWidth>, "height": <cellHeight> }
    },
    "geometryColumn": "the_geom",
    "ignoreOutside": true
  }
}
>>

filterSpatially(paramDsId, rel="intersects", negated=[], geomCol="the_geom") ::= <<
{ "filterSpatially": {
  	"geometryColumn": "<geomCol>",
  	"keyDataset": "<paramDsId>",
  	"spatialRelation": "<rel>"<if(negated)>,
    "options": {
      "negated": <negated>
    }
  	<endif>
  }
}
>>



spatialJoin(paramDsId, outputCols, geomCol="the_geom") ::= <<
{ "spatialBlockJoin": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>",
    "outputColumns": "<outputCols>"
  }
}
>>
spatialJoinDist(paramDsId, outputCols, dist, geomCol="the_geom") ::= <<
{ "spatialBlockJoin": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>",
    "outputColumns": "<outputCols>",
    "options": {
      "joinExpr": "within_distance(<dist>)"
    }
  }
}
>>

spatialSemiJoin(paramDsId, negated=[], geomCol="the_geom") ::= <<
{ "spatialSemiJoin": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>"<if(negated)>,
    "options": {
      "negated": <negated>
    }
    <endif>
  }
}
>>
spatialSemiJoinDist(paramDsId, dist, negated=[], geomCol="the_geom") ::= <<
{ "spatialSemiJoin": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>",
    "options": {
      "joinExpr": "within_distance(<dist>)"<if(negated)>,
      "negated": <negated>
      <endif>
    }
  }
}
>>

spatialOuterJoin(paramDsId, outputCols, negated=[], geomCol="the_geom") ::= <<
{ "spatialOuterJoin": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>",
    "outputColumns": "<outputCols>"<if(negated)>,
    "options": {
      "negated": <negated>
    }
    <endif>
  }
}
>>
spatialOuterJoinDist(paramDsId, outputCols, dist, negated=[], geomCol="the_geom") ::= <<
{ "spatialOuterJoin": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>",
    "outputColumns": "<outputCols>",
    "options": {
      "joinExpr": "within_distance(<dist>)"<if(negated)>,
      "negated": <negated>
      <endif>
    }
  }
}
>>

loadSpatialIndexJoin(leftDsId, rightDsId, outputCols=[]) ::= <<
{ "loadSpatialIndexJoin": {
    "leftDataset": "<leftDsId>",
    "rightDataset": "<rightDsId>"<if(outputCols)>,
    "outputColumns": "<outputCols>"
    <endif>
  }
}
>>
loadSpatialIndexjoinDist(leftDsId, rightDsId, dist, outputCols=[]) ::= <<
{ "loadSpatialIndexJoin": {
    "leftDataset": "<leftDsId>",
    "rightDataset": "<rightDsId>",
    "joinExpr": "within_distance(<dist>)",
    "outputColumns": "<outputCols>"
  }
}
>>

spatialAggregateJoin(paramDsId, geomCol="the_geom") ::= <<
{ "spatialDifferenceJoin": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>",
    "reducer": { "aggregate": [<aggrs:{a | "<a>"}; separator=",">] }
  }
}
>>

knnJoin(paramDsId, topK, radius, outputCols, geomCol="the_geom") ::= <<
{ "spatialKnnJoin": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>",
    "topK": <topK>,
    "radius": <radius>,
    "outputColumns": "<outputCols>"
  }
}
>>

clipJoin(paramDsId, geomCol="the_geom") ::= <<
{ "spatialClipJoin": {  "geomColumn": "<geomCol>",  "paramDataset": "<paramDsId>" } }
>>

differenceJoin(paramDsId, geomCol="the_geom") ::= <<
{ "spatialDifferenceJoin": {  "geomColumn": "<geomCol>",  "paramDataset": "<paramDsId>" } }
>>

intersectionJoin(paramDsId, outputCols=[], geomCol="the_geom") ::= <<
{ "spatialIntersectionJoin": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>"<if(outputCols)>,
    "outputColumns": "<outputCols>"
    <endif>
  }
}
>>

interpolateSpatially(paramDsId, valueCols, radius, outputCols, method, topK=[], geomCol="the_geom") ::= <<
{ "spatialInterpolation": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>",
    "valueColumns": "<valueCols>",
    "radius": <radius>,<if(topK)>
    "topK": <topK>,
    <endif>
    "outputColumns": "<outputCols>",
    "interpolationMethod": "method"
  }
}
>>

estimateIdw(paramDsId, valueCol, topK, radius, outputCol, power=[], geomCol="the_geom") ::= <<
{ "estimateIdw": {
    "geomColumn": "<geomCol>",
    "paramDataset": "<paramDsId>",
    "valueColumn": "<valueCol>",
    "topK": <topK>,
    "radius": <radius>,
    "outputDensityColumn": "<outputCol>"<if(power)>,
    "options": { "power": <power> }
    <else>
    <endif>
  }
}
>>

estimateKernelDensity(paramDsId, valueCol, radius, outputCol, geomCol="the_geom") ::= <<
{ "estimateKernelDensity": {
    "geomColumn": "<geomCol>",
    "dataset": "<paramDsId>",
    "valueColumn": "<valueCol>",
    "radius": <radius>,
    "densityColumn": "<outputCol>"
  }
}
>>